
var DRIVERS = {
  chrome: {
    cmd: 'chromedriver',
    args: ['--url-base=wd/hub'],
    port: '--port='
  },
  phantomjs: {
    cmd: 'phantomjs',
    args: [],
    port: '--webdriver='
  }
};

function localServer(server, title, appdir, browser, next) {
  // start a local chromedriver
  var port = parseInt(Math.random() * 1000, 10) + 4000
    , appport = parseInt(Math.random() * 1000, 10) + 6000
    , name = browser[0].toLowerCase()
    , config = DRIVERS.phantomjs;

  if (name.indexOf('chrome') === 0 || name.indexOf('google') === 0) {
    config = DRIVERS.chrome;
  } else if (name.indexOf('phantom') !== 0) {
    console.warn(name + ' driver not available. Using phantomjs');
  }

  console.log(utils.color('  [starting webdriver and foreman]', 32));
  var child = spawn(config.cmd, config.args.concat([config.port + port]), {
        stdio: [null, 'pipe', 'pipe']
      })
    , app = spawn('foreman', ['start', '-p', appport], {
        cwd: appdir,
        stdio: [null, 'pipe', process.stderr]
      });

  var driver = webdriver.remote('localhost', port)
    , oldquit = driver.quit;

  driver.quit = function (done) {
    oldquit.call(driver, function (err) {
      child.kill();
      app.kill();
      setTimeout(function () {
        done(err);
      }, 5000);
    });
  };
  function connect() {
    if (!childup || !appup) return;
    driver.init({}, function (err) {
      if (err && err.code === 'ECONNREFUSED') {
        var msg = 'Unable to connect to local server.'
          , newErr = new Error(msg);
        newErr.stack = '';
        return next(newErr);
      }
      next(err, driver, 'http://localhost:' + appport);
    });
  }
  var childup = false
    , appup = false;
  function listen(data) {
    if (data.toString().indexOf('listening on port') !== -1) {
      app.stdout.removeListener('data', listen);
      appup = true;
      connect();
    }
  }
  function listen2(data) {
    if (data.toString().indexOf('running on port') !== -1) {
      child.stdout.removeListener('data', listen2);
      childup = true;
      connect();
    }
  }
  app.stdout.on('data', listen);
  child.stdout.on('data', listen2);
  return driver;
}

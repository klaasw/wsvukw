{
  "_args": [
    [
      "mocha-selenium",
      "/home/ukwserver"
    ]
  ],
  "_from": "mocha-selenium@latest",
  "_id": "mocha-selenium@0.1.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/mocha-selenium",
  "_npmUser": {
    "email": "jared@jaredforsyth.com",
    "name": "jabapyth"
  },
  "_npmVersion": "1.2.18",
  "_phantomChildren": {},
  "_requested": {
    "name": "mocha-selenium",
    "raw": "mocha-selenium",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mocha-selenium/-/mocha-selenium-0.1.1.tgz",
  "_shasum": "314fd3ae5bd86ce701ffac171e42e6ce6f20af5d",
  "_shrinkwrap": null,
  "_spec": "mocha-selenium",
  "_where": "/home/ukwserver",
  "author": {
    "email": "jared@jaredforsyth.com",
    "name": "Jared Forsyth"
  },
  "bin": {
    "mocha-selenium": "bin/mocha-selenium.js"
  },
  "bugs": {
    "url": "https://github.com/jaredly/mocha-selenium/issues"
  },
  "dependencies": {
    "async": "~0.2.9",
    "commander": "~2.0.0",
    "debug": "~0.7.2",
    "glob": "~3.2.6",
    "mkdirp": "~0.3.5",
    "shell-quote": "~1.3.3",
    "superagent": "~0.15.5",
    "underscore": "~1.5.2",
    "wd": "~0.1.4"
  },
  "description": "Run mocha selenium acceptance tests in different browsers, in serial or parallel",
  "devDependencies": {
    "jshint": "~2.1.11",
    "mocha": "~1.13.0"
  },
  "directories": {},
  "dist": {
    "shasum": "314fd3ae5bd86ce701ffac171e42e6ce6f20af5d",
    "tarball": "https://registry.npmjs.org/mocha-selenium/-/mocha-selenium-0.1.1.tgz"
  },
  "homepage": "https://github.com/jaredly/mocha-selenium#readme",
  "keywords": [
    "mocha",
    "selenium",
    "test",
    "parallel",
    "serial",
    "browser",
    "saucelabs"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "jared@jaredforsyth.com",
      "name": "jabapyth"
    }
  ],
  "name": "mocha-selenium",
  "optionalDependencies": {},
  "readme": "\n# Mocha Selenium\nEverything you need for selenium testing in node.js.\n\nThere are two parts: the library and the runner.\n\nThe library provides you with the `setup()` function which returns a driver that is instrumented to make your tests **simple, semantic, and easy to use**. Among other things, it is automatically initialized in a `before()` clause, destroyed in an `after()` clause, and will even fire up an instance of your app & a webdriver server if you need them!\n\nThe runner is configured with a `selenium.json` file, and will run your mocha test files in series or in parallel, for any number of browsers. Installing it with `npm install -g mocha-selenium` will give you the `mocha-selenium` command on your path.\n\n### The Library\nHas a bunch of options. Some of the options are default to ENV variables if they are present. [Read the docs](http://jaredly.github.io/mocha-selenium/#section-2) for a thorough description.\n\nHere's an example:\n```js\nvar expect = require('expect.js')\n  , b = require('mocha-selenium').setup(\"Login Page\", {\n      appDir: path.dirname(__dirname),\n      lastShot: \"failed\"\n    });\n\ndescribe('The login page', function () {\n  this.timeout(20 * 1000)\n  before(function (done) {\n    b.get(b.baseUrl + '/login', done)\n  })\n  it('should work', function (done) {\n    function fail(err) {\n      b.haltChain()\n      done(err)\n    }\n    b.chain({onError: fail})\n     .fillInForm('.loginForm', {\n       username: 'jsmith',\n       password: '1830'\n     })\n     .clickByCss('.loginForm button.submit')\n     // make sure we were redirected to the account page\n     .url(function (err, url) {\n       if (err) return fail(err)\n       expect(url).to.match(/\\/account$/)\n       done()\n     })\n  })\n})\n```\n\n### Convenience functions added to the driver\nIn addition to the normal\n[wd methods](https://github.com/admc/wd/#supported-methods), there are\nthe following:\n\n#### General Methods\n\n##### `ensureCookie(name, value, done(err))`\nOn the current page, if the cookie by the name of `name` with value\n`value` does not exist, set the cookie and refresh the page.\n\nIf value is a function, it is called with the current value of the\ncookie. If it returns a value other than the current cookie value, the\ncookie is set to that value.\n\n##### `fillInForm(data, [formSelector,] done(err))`\nData is a map of `\"input name\": \"value to type\"`. If `formSelector` is\ngiven, only inputs that are children of the given selector will be\nfilled in. Otherwise, the first input in the document with the given\n`name` will be populated.\n\n##### `rel(url, done(err))`\nGets `b.baseUrl + url`.\n\n#### Element-specific methods\nThe following suffixes are available for these methods, mirroring the `wd` library:\n\nByClassName, ByCssSelector, ById, ByName, ByLinkText, ByPartialLinkText, ByTagName, ByXPath, ByCss.\n\nI will use the `ByCss` suffix for demonstration.\n\n- textByCss(selector, done(err, text, element))\n- visibleByCss(selector, done(err, isVisible, element))\n- valueByCss(selector, done(err, value, element))\n- clickByCss(selector, done(err, element))\n- waitAndGet(selector, timeout, done(err, element))\n- waitAndClickByCss(selector, timeout, done(err, element))\n\n### The Runner\nRun your mocha selenium tests in parallel in mutliple browsers.\n\n#### Usage\n\n```\n  Usage: mocha-selenium [options]\n\n  Options:\n\n    -h, --help               output usage information\n    -V, --version            output the version number\n    -e, --environment [env]  Pick the environment to run (host + browsers). Default: local\n    -p, --parallel           Run the tests in parallel. Default: false\n    -c, --config [file]      Specify the config file. Default: ./selenium.json\n```\n\n##### Config\n\n```javascript\n{\n  files: // filename or glob, or list of filenames or globs\n  envs: { // a map of [envname] to an environment definition.\n    local: [browserdef, ...] OR {\n      browsers: [browserdef, ...],\n      inherits: // name or list of names of other environemnts. Their\n                // browserdefs will be appended to the current env.\n      // if no hostname is given, mocha-selenium will start its own\n      // selenium drivers. Currently phantomjs and chrome are supported\n      hostname: \"ondemand.saucelabs.com\",\n      port: 80,\n      auth: {\n        type: 'plain',\n        username: 'MyName',\n        password: 'secret'\n      } OR {\n        type: 'env', // the username and password are environmental variables\n        username: 'SAUCE_USERNAME',\n        password: 'SAUCE_ACCESS_KEY'\n      }\n    },\n    otherenv: ...,\n    ...\n  }\n}\n```\n\n#### Browserdef:\n\n```\n[\"browsername\", \"version\", \"platform\"]\n\nex:\n[\"internet explorer\", \"8\", \"Windows XP\"]\n```\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jaredly/mocha-selenium.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.1"
}

extends layout
block append testcode
    script.






block content
    div.container-fluid
        div.content
            div.col-md-12
                //Scahaltflaechen anzeigen

                != "<div class=\"row\">"
                each val, index in gesamteKonfig.FunkstellenReihe
                    //- console.log(!{index})
                    //- console.log(!{val})

                    //- Korrekte Verschachtelung der Row-DIVs
                    if index == 'Button11'
                        //- keines, erstes DIV geht vor der schleife auf
                    if index == 'Button21' || index == 'Button31' || index == 'Button41'
                        != "</div><div class=\"row\">"

                    div.col-md-2(id=index + 'panel',style="padding-left: 5px;padding-right: 5px;")
                        div.panel.panel-default(
                            class=(val[0] == 'frei' ? 'hidden' : '')
                            style="float:left; margin-bottom: 10px"
                        )
                            //Block Mithoeren
                            div(
                                id=gesamteKonfig.ArbeitsplatzGeraete[gesamteKonfig.MhanZuordnung[val[0]]]
                                style="width:100%"
                            )
                                //Schaltflaeche MHAN
                                div.text-center.hidden(
                                    style="width:100%;border-top-left-radius: 3px;border-top-right-radius: 3px;background-color:#f5f5f5;padding-left: 3px;padding-right: 3px"
                                ) #{(gesamteKonfig.MhanZuordnung[val[0]] ? gesamteKonfig.MhanZuordnung[val[0]] : '--ohne--')}
                                    div.pull-right
                                        span.glyphicon.glyphicon-chevron-down(
                                            data-toggle='popover'
                                            container='panel-body'
                                            data-placement='right'
                                            title="Popover title"
                                            data-html='true'
                                            data-content='<b>Vivamus</b> sagittis lacus vel augue laoreet rutrum faucibus.'
                                            )
                                //Schaltflaeche Ship
                                div.text-center(style="float:left; width:50%; background-color:#f5f5f5")

                                    div(
                                        id=gesamteKonfig.ArbeitsplatzGeraete[gesamteKonfig.MhanZuordnung[val[0]]] + 'ship'
                                        onclick='schalteKanal(event,this)'
                                        style="cursor: pointer;z-index:-1;float:left;width:20%;height: 44px;padding-top: 12px;font-size: 16px;font-weight: bold;"
                                    )
                                        span S
                                    div.pull-right
                                        span#test 50
                                        //span.glyphicon.glyphicon-volume-up(id=gesamteKonfig.ArbeitsplatzGeraete[gesamteKonfig.MhanZuordnung[val[0]]]+'ship_pegel',onclick='setzeLautstaerke(this.id)',style="cursor: pointer;padding-top: 15px;padding-bottom: 15px;padding-left: 10px;padding-right: 10px;",data-toggle='modal',data-target='#pegelModal')
                                        span.glyphicon.glyphicon-volume-up(
                                        id=gesamteKonfig.ArbeitsplatzGeraete[gesamteKonfig.MhanZuordnung[val[0]]] + 'ship_pegel'
                                        style="cursor: pointer;padding-top: 15px;padding-bottom: 15px;padding-left: 10px;padding-right: 10px;"
                                        data-toggle='popover'
                                        container='panel-body'
                                        data-placement='right'
                                        data-html='true'
                                        data-content="<input id='ex1', type='text', data-slider-min='0', data-slider-max='100', data-slider-step='10' ,data-slider-orientation='vertical'>"
                                    )
                                //Schaltflaeche Pilot
                                div.text-center(style="float:left; width:50%;background-color:#f5f5f5")
                                    div(style="float:left;width:20%;height: 44px;padding-top: 12px;font-size: 16px;font-weight: bold;")
                                        span L
                                    div.pull-right
                                        span#test2 100
                                        span.glyphicon.glyphicon-volume-up(
                                            onclick='setzeLautstaerke(this.id)'
                                            style="cursor: pointer;padding-top: 15px;padding-bottom: 15px;padding-left: 10px;padding-right: 10px;"
                                            data-toggle='popover'
                                            container='panel-body'
                                            data-placement='right'
                                            title="Popover title"
                                            data-html='true'
                                            data-content='<p>Lautstaerke per Softwareeinstellen<input id="ex1" type="text" data-slider-min="0" data-slider-max="100" data-slider-step="10" data-slider-orientation="vertical"/></p>'
                                        )
                            //Schaltflaeche Kanal
                            div(
                                id=index
                                buttonElement='Flaeche'
                                onclick='schalteKanal(event,this,"SPAN")'
                                style="float:left; width:100%; cursor: pointer;z-index:-1;padding-top: 3px;padding-bottom: 3px"
                            )
                                if gesamteKonfig.FunkstellenDetails[val[0]].MKA
                                    h2.text-right(id=index,style="margin-top: 15px;margin-bottom: 5px;")
                                        span #{gesamteKonfig.FunkstellenDetails[val[0]].channel}
                                        button.btn.btn-default.btn-lg.dropdown-toggle(type='button', data-toggle='modal',data-target='#mkaModal',style="margin-left:30%;padding-top: 2px;padding-bottom: 2px;height: 36px;margin-top: -5px;",onclick='setzeKanalMka(event,this)')
                                            span.caret
                                else
                                    h2.text-center(
                                        id=index
                                        style="margin-top: 15px;margin-bottom: 5px;"
                                    ) #{gesamteKonfig.FunkstellenDetails[val[0]].channel}
                                //Atis Kennung
                                div.panel.panel-default.text-center(
                                    buttonElement='atis'
                                    style="float:left;width:100%;margin-top:15px;margin-bottom:0px"
                                ) ATIS
                                //Funkstellen
                                div(style="float:left;padding-left: 3px;padding-right: 3px;padding-top: 2px;padding-bottom: 2px;height:25px;width:100%")
                                    div(
                                        id=(val[0] ? gesamteKonfig.FunkstellenDetails[val[0]].id : '--ohne--')
                                        style="float:left; width:50%;border: 1px solid;border-color:#ddd;padding-left: 3px;padding-right: 3px; background-color:#f5f5f5"
                                        fstStatus="-1"
                                    )
                                        //-Geraete von der Komponeten-ID abschneiden
                                        - kompomentenID = val[0] ? val[0] : '---------------------';
                                        - geraet = kompomentenID.substr(15,6);
                                        - standort = kompomentenID.substr(8,6);
                                        span #{val[0] ? geraet : '-ohne-'}
                                        //div.pull-right
                                        // span H
                                    div(
                                        id=(val[1] ? gesamteKonfig.FunkstellenDetails[val[1]].id : '--ohne--')
                                        style="float:left; width:50%;border: 1px solid;border-color:#ddd;padding-left: 3px;padding-right: 3px; background-color:#f5f5f5"
                                        fstStatus="-1"
                                    )
                                        //-Geraete von der Komponeten-ID abschneiden
                                        - kompomentenID = val[1] ? val[1] : '---------------------';
                                        - geraet = kompomentenID.substr(15,6);
                                        - standort = kompomentenID.substr(8,6);
                                        span #{val[1] ? geraet : '-ohne-'}
                                        //div.pull-right
                                        // span R
                            //SPAN
                            div.text-center.hidden(
                                id=gesamteKonfig.ArbeitsplatzGeraete.SPAN01
                                style="float:left; width:100%;border-bottom-left-radius: 3px;border-bottom-right-radius: 3px;padding-left: 3px;padding-right: 3px"
                            ) SPAN
                                //ZUM Test fuer PTT Darstellung span.label.label-danger PTT
                                div.pull-right
                                    span.glyphicon.glyphicon-chevron-down(
                                        data-toggle='popover'
                                        container='panel-body'
                                        data-placement='right'
                                        title="Popover title"
                                        data-html='true'
                                        data-content='<b>Vivamus</b> sagittis lacus vel augue laoreet rutrum faucibus.'
                                    )


                //- Abschliessendes Row-DIV
                != "</div><!-- row>"



                //Test fuer Slider
                div#popover-content.hidden
                    p Lautstaerke per Softwareeinstellen
                    //input#ex1(data-slider-id='ex1Slider', type='text', data-slider-min='0', data-slider-max='100', data-slider-step='1', data-slider-value='15',data-slider-orientation='vertical')
                    input#ex1(
                        type='text'
                        data-slider-min='0'
                        data-slider-max='100'
                        data-slider-step='10'
                        data-slider-orientation='vertical'
                    )







                // Modalfenster fuer MKA Kanalwahl
                #mkaModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='mkaModalLabel')
                    .modal-dialog(role='document')
                        .modal-content
                            .modal-header
                                button.close(type='button', data-dismiss='modal', aria-label='Close')
                                    span(aria-hidden='true')
                                h4#mkaModalLabel.modal-title Kanalauswahl für Mehrkanal-Anlage
                            .modal-body
                                p
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 1
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 2
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 3
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 4
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 5
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 6
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 7
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 8
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 9
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 10
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 11
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 12
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 69
                                    button.btn.btn-default.btn-lg(type='button',onclick='setzeKanal(this)',data-dismiss='modal') 68

                                #mySpinbox.spinbox(data-initialize='spinbox', style="font-size: 20px; width: 20%;")
                                    input.form-control.input-mini.spinbox-input(type='text', style="height: 75px;font-size:25px")
                                    div.spinbox-buttons.btn-group.btn-group-vertical(style="width:60px")
                                        button.btn.btn-default.spinbox-up.btn-lg(type='button', style=" width: 63px; height: 36px;")
                                            span.glyphicon.glyphicon-chevron-up
                                            span.sr-only Increase
                                        button.btn.btn-default.spinbox-down.btn-lg(type='button', style=" width: 63px; height: 36px;")
                                            span.glyphicon.glyphicon-chevron-down
                                            span.sr-only Decrease


                            .modal-footer
                                button.btn.btn-default(type='button', data-dismiss='modal') Abbrechen
                                button.btn.btn-primary(type='button', data-dismiss='modal', onclick='setzeKanal()') Ändern
                // errorModal als mixin ausgelagert nach layout.jade
                +errorModal('DUE','Fehler','Verbindung zum Server abgebrochen. Bitte verwenden Sie folgende alternativen Server:')
                +errorModal('RFD','RFD-Fehler','Verbindung zum RFD-Dienst abgebrochen. Bitte verwenden Sie folgende alternativen Server:')



block append testcode2
    script.
        //Aktuelles NavElement Hervorheben
        //$(document).ready(function(){
        // $(".nav").find(".active").removeClass("active")
        // $('#ukw').addClass('active')
        //})

        var test = false;
        var ApID = ''; //zb.JA NvD
        var SPAN = ''; //zb. 1-H-RFD-WHVVKZ-SPAN-01
        var MhanZuordnung = {
            "MHAN01": "1-H-RFD-WHVVTA-FKEK-2",
            "MHAN02": "1-H-RFD-TETTEN-FKEK-2",
            "MHAN03": "1-H-RFD-HELGLT-FKEK-1",
            "MHAN04": "1-H-RFD-WHVVTA-FKMK-1"
        };
        var ApFunkstellen = {};
        var ArbeitsplatzGeraete;
        var Einzel = true;
        var einzelStatus;
        var gruppenStatus;
        var IpConfig;

        //WebSocket Verbindung herstellen
        var aktuellerUKWserver = location.protocol + '//' + location.hostname + ':'+ location.port;
        var socket = io(aktuellerUKWserver);

        ladeKonfig()
        verbindungsPruefung()




        //Optionen fuer Notify festlegen
        $.notifyDefaults({
            // settings
            element: 'body',
            position: null,
            type: "info",
            allow_dismiss: true,
            newest_on_top: true,
            showProgressbar: false,
            placement: {
                from: "top",
                align: "right"
            },
            offset: {
                x: 10,
                y: 50
            },
            spacing: 10,
            z_index: 1031,
            delay: 5000,
            timer: 1000,
            url_target: '_blank',
            mouse_over: null,
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            },
            onShow: null,
            onShown: null,
            onClose: null,
            onClosed: null,
            icon_type: 'class',
            template: '<div data-notify="container" class="col-xs-11 col-sm-2 alert alert-{0}" style="padding: 5px" role="alert">' +
            '<button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>' +
            '<span data-notify="icon"></span> ' +
            '<span data-notify="title">{1}</span> ' +
            '<span data-notify="message">{2}</span>' +
            '<div class="progress" data-notify="progressbar">' +
            '<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +
            '</div>' +
            '<a href="{3}" target="{4}" data-notify="url"></a>' +
            '</div>'
        });

        //Variablen zum Arbeitsplatz laden
        function ladeKonfig() {
            $.get("ukwKonfig", function (data) { //IP-Adress nur als Platzhalter zum Testen
                console.log('ukwKonfig data:'+ data);

                ApFunkstellen = data.Konfigdaten.FunkstellenDetails
                SPAN = data.Konfigdaten.ArbeitsplatzGeraete.SPAN01
                MhanZuordnung = data.Konfigdaten.MhanZuordnung
                ArbeitsplatzGeraete = data.Konfigdaten.ArbeitsplatzGeraete
                ApID = data.Arbeitsplatz
                IpConfig = data.Konfigdaten.IpConfig
                console.log('geladeneIPconfig: '+ JSON.stringify(data.Konfigdaten.IpConfig));

                lautsprecherAufschalten(MhanZuordnung);
            }).fail(function () {
                console.log('ukwKonfig konnte nicht geladen werden - Kanalzuordnung kann nicht angezeigt werden.');
                // TODO Fehlerdetail uebergeben: ukwKonfig konnte nicht geladen werden
                $('#errorModalRFD').modal('show')
            });
        }






        //Popover und Slider aktivieren
        //Slider und Popover fuer Lautstaerke initialisieren
        //Lautstaerke noch in AP Einstellungen speichern bzw laden
        function pop_slider() {
            //1. Alle Popover beim Laden anzeigen um css Anpassungen aus Javascript zu setzen
            $('[data-toggle="popover"]').popover('show')
            //$('[data-toggle="popover"]').popover()
            //CSS Eigenschaften setzen, da sonst die Parent Eigenschaften genommen werden
            $('.popover-title').css("background-color", "#9FC53B");
            $('.popover').css("background-color", "red");

            //Eventhandler beim Anzeige des Popover
            //Dann aus Inputfeld einen Slider machen
            $('[data-toggle="popover"]').on('shown.bs.popover', function () {
                $('#ex1').slider({
                    reversed: true,
                    tooltip: 'always'
                });
                console.log(this)
                //Id ermitteln und gesetzten werden auf Slider setzen
                geklickteID = this.id
                aktuellerPegel = parseInt($('#' + geklickteID).prev().text())
                $('#ex1').slider('setValue', aktuellerPegel)

                //Event beim Sliden des Sliders
                $('#ex1').on('change', function (ev) {

                    //$('#ex1').offsetParent().attr('class'))
                    //sliderVal = ev.value;

                    //Wert auf Textfeld schreiben
                    $('#' + geklickteID).prev().text(ev.value.newValue)
                    setzeLautstaerke(geklickteID, ev.value.newValue)


                });//Slide Event zu
            })//Popover Event zu

            //2. Alle Popover wieder schließen
            $('[data-toggle="popover"]').popover('hide')

        };

        //Initialisierung
        pop_slider();

        /**
         $("[data-toggle=popover]").popover();
         $('.popover-title').css("backgrouond-color", "#9FC53B");
         $('.popover').css("background-color", "red");
         **/




        //Mithoerlautsprecher aufschalten
        function lautsprecherAufschalten(mhan) {
            console.log(mhan)
            for (var funkstelle in mhan) {
                socket.emit('clientMessage', {
                    'FstID': funkstelle,
                    'ApID': ApID,
                    'SPAN': ArbeitsplatzGeraete[mhan[funkstelle]],
                    'aktion': 'schaltenEinfach'
                })

            }
        }

        //Pruefe ob Wert in Objekt vorkommt
        function hatWert(obj, value) {
            for (var id in obj) {
                if (obj[id] == value) {
                    return true;
                }
            }
            return false;
        }



        //Ereignisse fuer Verbindungsueberwachung
        //Dafuer in der Navleiste eine Statusflaeche einbauen
        //Wenn lokaler DUE getrennt dann lokaler RFD auf undefined --ygrau
        function verbindungsPruefung() {
            socket.on('connect', function () {
                console.log('check 2------------------------VERBUNDEN', socket.connected);
                $('#button#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}_DUE').removeClass("label-danger")
                $('#button#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}_DUE').addClass("label-success")
            });


            socket.on('disconnect', function () {
                console.log('check 2-----------------------GETRENNT', socket.connected);
                $('#button#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}_DUE').removeClass("label-success")
                $('#button#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}_DUE').addClass("label-danger")
                //Zeige Error Modal Fenster
                // TODO: Wiederverbindung versuchen, waehrend dieser Zeit kein Fehler zeigen, sondern erst dann?
                $('#errorModalDUE').modal('show')
            });
        }




        //Loeschen
        //Alle eingehenden WebSocket Nachrichten einhaengen TYP 'statusMessage'
        socket.on('statusMessage', function (msg) {
            //-console.log("statusMessage received: "+ JSON.stringify(msg) + ' - '+ JSON.stringify(IpConfig.alternativeIPs) + '#')
            for(var i=0; i < IpConfig.alternativeIPs.length; i++ ){
                //-console.log('statusMessage: loop '+ i+' - '+ "  / suche rfdIP:" + IpConfig.cfgIPs.rfdIP + ' in '+msg.RfdStatus.URL + '     gefunden an Position: ' + msg.RfdStatus.URL.indexOf(IpConfig.cfgIPs.rfdIP));
                var vergleich = IpConfig.alternativeIPs[i];
                //- hier ist noch nicht die Zuordnung der RFD-IP zu allen RFD-IPs moeglich, da nur die eigene IP bekannt ist - alle drei in Konfig eintragen
                //- aktueller VTR ist der bevorzugte aus Config
                if (vergleich[0].indexOf('#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}') > -1){
                    //- rfd IP ist die an der x. Stelle konfigurierte (trift noch ueberall zu, weil noch nicht in Config alle rdfIPs stehen)
                    if (msg.RfdStatus.URL.indexOf(IpConfig.cfgIPs.rfdIP) > -1){
                        if (msg.RfdStatus.Status == 'OK') {
                            $('#button'+ IpConfig.alternativeIPs[i][0] +'_RFD').removeClass("label-danger")
                            $('#button'+ IpConfig.alternativeIPs[i][0] +'_RFD').addClass("label-success")
                        } else if (msg.RfdStatus.Status == 'Error') {
                            $('#button'+ IpConfig.alternativeIPs[i][0] +'_RFD').removeClass("label-success")
                            $('#button'+ IpConfig.alternativeIPs[i][0] +'_RFD').addClass("label-danger")
                        } //if()
                    } //if()
                } //if()
            } // for
        });


        //eingehende Socket Nachrichten vom TYP rfdMessage, Statusmeldungen verarbeitebn
        socket.on('ukwMessage', function (msg) {
            //-console.log("ukwMessage received: "+ JSON.stringify(msg));
            if (typeof msg === 'object') {
                //Empfangen aktiv
                if ('RX' in msg && msg.RX.$.state === '1') {
                    //suche SChaltflaeche zu FunkstellenID
                    button = $('#' + msg.RX.$.id).offsetParent().attr('id')

                    //Kanalflaeche faerben
                    $('#' + button + ' [buttonElement="Flaeche"]').addClass("bg-danger")
                    $('#' + button + ' [buttonElement="Flaeche"] h2').addClass("text-danger")

                    $.notify({
                        message: 'Empfang:<br>' + ApFunkstellen[msg.RX.$.id].sname
                    }, {
                        type: 'danger'
                    })
                    console.log(msg.RX.$.id)
                }
                //Empfangen deaktiv
                if ('RX' in msg && msg.RX.$.state === '0') {
                    //suche SChaltflaeche zu FunkstellenID
                    button = $('#' + msg.RX.$.id).offsetParent().attr('id')

                    //Kanalflaeche entfaerben
                    $('#' + button + ' [buttonElement="Flaeche"]').removeClass("bg-danger")
                    $('#' + button + ' [buttonElement="Flaeche"] h2').removeClass("text-danger")

                    console.log(msg.RX.$.id)
                }
                //Senden aktiv
                if ('TX' in msg && msg.TX.$.state === '1') {
                    //Pruefen ob SPAN ID in TX Objekt
                    if (msg.TX.$.id.indexOf("SPAN") != -1) {
                        //erstmal nichts machen. ggf in SPAN Element etwas anzeigen
                    }
                    else {
                        //suche SChaltflaeche zu FunkstellenID
                        button = $('#' + msg.TX.$.id).offsetParent().attr('id')

                        //Kanalflaeche faerben
                        $('#' + button + ' [buttonElement="Flaeche"]').addClass("bg-success")
                        $('#' + button + ' [buttonElement="Flaeche"] h2').addClass("text-success")


                        console.log(msg.TX.$.id)
                    }
                }
                //Senden deaktiv
                if ('TX' in msg && msg.TX.$.state === '0') {
                    if (msg.TX.$.id.indexOf("SPAN") != -1) {
                        //erstmal nichts machen. ggf in SPAN Element etwas anzeigen
                    }
                    else {
                        //suche SChaltflaeche zu FunkstellenID
                        button = $('#' + msg.TX.$.id).offsetParent().attr('id')

                        //Kanalflaeche entfaerben
                        $('#' + button + ' [buttonElement="Flaeche"]').removeClass("bg-success")
                        $('#' + button + ' [buttonElement="Flaeche"] h2').removeClass("text-success")

                        console.log(msg.TX.$.id)
                    }
                }

                if ('FSTSTATUS' in msg && msg.FSTSTATUS.$.state === '0') {
                    $('#' + msg.FSTSTATUS.$.id).closest('div').removeClass("bg-danger")
                    $('#' + msg.FSTSTATUS.$.id).closest('div').addClass("bg-success")
                    $('#' + msg.FSTSTATUS.$.id).closest('div').css("background-color", "")
                    $('#' + msg.FSTSTATUS.$.id).closest('div').attr("fstStatus", "0")
                    console.log(msg.FSTSTATUS.$.id)

                    //Bei Kanalaenderung die Kanalnummer setzen
                    if (msg.FSTSTATUS.$.channel > -1) {
                        button = $('#' + msg.FSTSTATUS.$.id).offsetParent().attr('id')
                        $('#' + button + ' > div > div  > h2 > span').text(msg.FSTSTATUS.$.channel)
                    }

                }
                if ('FSTSTATUS' in msg && msg.FSTSTATUS.$.state === '1') {
                    $('#' + msg.FSTSTATUS.$.id).closest('div').removeClass("bg-success")
                    $('#' + msg.FSTSTATUS.$.id).closest('div').addClass("bg-danger")
                    $('#' + msg.FSTSTATUS.$.id).closest('div').css("background-color", "")
                    $('#' + msg.FSTSTATUS.$.id).closest('div').attr("fstStatus", "1")
                    
                    //Notify by Störung
                    $.notify({
                        message: 'Störung:<br>' + ApFunkstellen[msg.FSTSTATUS.$.id].sname
                    }, {
                        type: 'danger'
                    })
                    //Funktionen von "getrennt"
                    //suche SChaltflaeche zu FunkstellenID
                    button = $('#' + msg.FSTSTATUS.$.id).offsetParent().attr('id')
                    //$('#'+button+' > div > div.panel-heading > span').text( "getrennt" )
                    $('#' + button + ' > div').removeClass("panel-primary")
                    $('#' + button + ' > div').css("background-color", "")

                    $('#' + button + ' > div > div:nth-child(3)').removeClass("bg-primary")
                    ApFunkstellen[msg.FSTSTATUS.$.id].aufgeschaltet = false
                    $.notify('Getrennt: <br>' + ApFunkstellen[msg.FSTSTATUS.$.id].sname)
                    
                    //geschaltetet Zustände an Server übertragen
                    socket.emit('clientMessageSchaltzustand', {
                        'Zustand': ApFunkstellen,
                        'Arbeitsplatz': ApID
                    })



                    console.log(msg.FSTSTATUS.$.id)

                }
                //Schalten fuer SPrechANlagen und MitHoerANlagen
                if ('geschaltet' in msg && msg.geschaltet.$.state === '1') {

                    if (hatWert(ArbeitsplatzGeraete, msg.geschaltet.$.Ap)) {

                        //aendern Darstellung fuer MHAN
                        if (msg.geschaltet.$.Ap.indexOf("MHAN") != -1) {
                            $('#' + msg.geschaltet.$.Ap + 'ship').parent().css("background-color","")
                            $('#' + msg.geschaltet.$.Ap + 'ship').parent().addClass("bg-primary")

                        }

                        //aendern Darstellung fuer SPAN
                        if (msg.geschaltet.$.Ap.indexOf("SPAN") != -1) {
                            //suche SChaltflaeche zu FunkstellenID
                            button = $('#' + msg.geschaltet.$.id).offsetParent().attr('id')

                            //$('#'+button+' > div > div.panel-heading > span').text( "aufgeschaltet" )
                            $('#' + button + ' > div').addClass("panel-primary")
                            $('#' + button + ' > div').css("background-color", "#d9edf7")
                            $('#' + button + ' > div > div:nth-child(3)').addClass("bg-primary")

                            ApFunkstellen[msg.geschaltet.$.id].aufgeschaltet = true
                            $.notify('Aufgeschaltet: <br>' + ApFunkstellen[msg.geschaltet.$.id].sname)
                            console.log(msg.geschaltet.$.id)
                            //geschaltetet Zustände an Server übertragen
                            socket.emit('clientMessageSchaltzustand', {
                                'Zustand': ApFunkstellen,
                                'Arbeitsplatz': ApID
                            })
                        }
                    }
                }

                //Trennen fuer SPrechANlagen und MitHoerANlagen
                if ('getrennt' in msg && msg.getrennt.$.state === '1') {

                    if (hatWert(ArbeitsplatzGeraete, msg.getrennt.$.Ap)) {

                        //Aendern Darstellung fuer MHAN
                        if (msg.getrennt.$.Ap.indexOf("MHAN") != -1) {

                        }
                        //Aendern Darstellung fuer SPAN
                        if (msg.getrennt.$.Ap.indexOf("SPAN") != -1) {

                            //suche SChaltflaeche zu FunkstellenID
                            button = $('#' + msg.getrennt.$.id).offsetParent().attr('id')
                            //$('#'+button+' > div > div.panel-heading > span').text( "getrennt" )
                            $('#' + button + ' > div').removeClass("panel-primary")
                            $('#' + button + ' > div').css("background-color", "")

                            $('#' + button + ' > div > div:nth-child(3)').removeClass("bg-primary")
                            ApFunkstellen[msg.getrennt.$.id].aufgeschaltet = false
                            $.notify('Getrennt: <br>' + ApFunkstellen[msg.getrennt.$.id].sname)
                            console.log(msg.getrennt.$.id)
                            //geschaltetet Zustände an Server übertragen
                            socket.emit('clientMessageSchaltzustand', {
                                'Zustand': ApFunkstellen,
                                'Arbeitsplatz': ApID
                            })
                        }
                    }
                }


            }  // if (typeof msg === 'object')
            else {
                msgText = msg.replace("<", "")
                msgText = msgText.replace("\>", "")

                // RFD Fehler
                if (msgText.startsWith('RFD') && msgText.endsWith('fehlgeschlagen')) {
                    //-console.log('RFD Aufruf fehlgeschlagen')
                    $('#button#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}_RFD').removeClass("label-success")
                    $('#button#{gesamteKonfig.IpConfig.alternativeIPs[0][0]}_RFD').addClass("label-danger")
                } else {
                    console.log(msgText)
                }
                //$.notify('Meldung: '+msgText)

                //$('#messages').append($('<li>').text(msg));
                //$('#messages').append($.text(msg));

            }


        });

        //Pruefe welches Element geklickt wurde
        //Vermeide aufschalten/trennen bei MKA Dropdown
        function angeklickt(e, element) {
            if (element) {
                e = e || event
                var ziel = e.target || e.srcElement
                if (ziel.id == element.id)
                    return true
                else
                    return false
            }
            else return true
        }

        //setze Variable geklickteMKA fuer geklickte MKA Funkstellen ID
        function setzeKanalMka(event, element) {
            if (angeklickt(event, element)) {
                //Eltern Element finden
                button = $(element).offsetParent().attr('id')
                //Funkstellen ID finden
                //geklickteMKA=$('#'+button +'> div > div:nth-child(2) > div:nth-child(2) > span').attr('class')
                //geklickteMKA=$('#'+button +'> div > div:nth-child(2) > div > span').attr('id')
                geklickteMKA = $('#' + button + ' > div div:nth-child(2) > div > div:nth-child(1)').attr('id')
                console.log("Dropdown von:" + geklickteMKA)


            }
        }

        //Kanalschalten
        //Pruefe zunaechst ob Element geklickt wurde
        function schalteKanal(event, element, SPAN) {
            if (angeklickt(event, element)) {
                if (SPAN) {
                    //uebergeordnetes Element
                    button = $('#' + element.id).offsetParent().attr('id')
                    //console.log(element)
                    //console.log("Klick: "+element.id)
                    //console.log(button)

                    console.log($('#' + button + ' > div div:nth-child(2) > div > div:nth-child(1)').attr('id'))
                    console.log($('#' + button + ' > div > div:nth-child(3)').attr('id'))
                    geklickteFstHaupt = $('#' + button + ' > div div:nth-child(2) > div > div:nth-child(1)').attr('id')
                    geklickteFstReser = $('#' + button + ' > div div:nth-child(2) > div > div:nth-child(2)').attr('id')
                    geklickteSPAN = ($('#' + button + ' > div > div:nth-child(3)').attr('id'))

                    //Status der Funkstellen
                    geklickteFstHauptStatus = $('#' + geklickteFstHaupt).attr('fstStatus')
                    geklickteFstReserStatus = $('#' + geklickteFstReser).attr('fstStatus')


                    //nur schalten, wenn Status 0 bzw. ok
                    if (geklickteFstHauptStatus == "0"){
                        schalteKanalID(geklickteFstHaupt, geklickteSPAN)
                    }
                    //versuche Reserveanlage zu schalten
                    else {
                        $.notify({
                            message: 'Hauptanlage gestört'
                        }, {
                            type: 'danger'
                        })
    
                        //TODO:

                    }

                    
                }
                else {
                    //uebergeordnetes Element
                    button = $('#' + element.id).offsetParent().attr('id')
                    console.log(element)
                    console.log("Klick: " + element.id)
                    console.log(button)
                    console.log($('#' + button + ' div > div').attr('id'))

                    geklickteFstHaupt = $('#' + button + ' div > div:nth-child(1) > div:nth-child(1)').attr('id')
                    geklickteFstReser = $('#' + button + ' div > div:nth-child(1) > div:nth-child(2)').attr('id')
                    geklickteMHAN = ($('#' + button + ' div > div').attr('id'))

                    schalteKanalID(geklickteFstHaupt, geklickteMHAN)

                }


            }
        }



        function schalteKanalID(geklickteFstID, geklickteSPANMHAN) {
            //console.log("Klick: "+geklickteID)
            //$.notify('test:'+ApFunkstellen[geklickteID].kurzname);

            if (Einzel === true) {
                $.each(ApFunkstellen, function (key, value) {
                    if (value.aufgeschaltet === true && key != geklickteFstID) {
                        console.log(key, value.aufgeschaltet)
                        trennen(key, geklickteSPANMHAN)
                    }
                    //trenne aufgeschaltet
                })
            }

            if (ApFunkstellen[geklickteFstID].aufgeschaltet === true) {
                trennen(geklickteFstID, geklickteSPANMHAN)

            }
            else {
                schalten(geklickteFstID, geklickteSPANMHAN)

            }
        }

        function trennen(geklickteID, geklickteSPANMHAN) {
            socket.emit('clientMessage', {
                'FstID': geklickteID,
                'ApID': ApID,
                'SPAN': geklickteSPANMHAN,
                'aktion': 'trennenEinfach'
            })
            $.notify('Trenne: <br>' + ApFunkstellen[geklickteID].sname);
            //ApFunkstellen[geklickteID].aufgeschaltet=false

            //$('#'+geklickteID+'-Panel > div').removeClass( "panel-primary" )
            //$('#'+geklickteID+'-Panel > div > div.panel-heading > span').text( "getrennt" )
        }

        function schalten(geklickteID, geklickteSPANMHAN) {
            socket.emit('clientMessage', {
                'FstID': geklickteID,
                'ApID': ApID,
                'SPAN': geklickteSPANMHAN,
                'aktion': 'schaltenEinfach'
            })
            $.notify('Schalte: <br>' + ApFunkstellen[geklickteID].sname)

            //ApFunkstellen[geklickteID].aufgeschaltet=true
            //$('#'+geklickteID+'-Panel > div > div.panel-heading > span').text( "aufgeschaltet" )
            //$('#'+geklickteID+'-Panel > div').addClass( "panel-primary" )
            //$('.popover-title').css("color", "black"); $('.popover').css("color", "black");

        }










        function setzeLautstaerke(geklickteID, level) {


            console.log("Klick: Lautstaerke " + geklickteID)
            console.log($('#' + geklickteID).prev().text())
            var aktuellerPegel = parseInt($('#' + geklickteID).prev().text())
            MhanID = geklickteID.replace('ship_pegel', '')
            test1 = $('#' + geklickteID).offsetParent().attr('id')

            test2 = $('#' + test1 + ' > div > div > div:nth-child(3) > div:nth-child(1)')
            geklickteFstHaupt = test2[1].id

            socket.emit('clientMessage', {
                'FstID': geklickteFstHaupt,
                'SPAN': MhanID,
                'aktion': 'SetzeAudioPegel',
                'Kanal': level
            })
            $.notify('Lautstaerke: ' + ApFunkstellen[geklickteFstHaupt].sname + ' ...')


            /**
             $('#ex1').slider('setValue', aktuellerPegel)
             $('#ex1').on('slide', function (ev) {
            //sliderVal = ev.value;
        $('#'+geklickteID).prev().text(ev.value)

        });
             **/


        }





        function gruppen(buttonID) {

            //Wechsel zu Gruppenschaltung
            if (Einzel === true) {
                Einzel = false
                einzelStatus = JSON.stringify(ApFunkstellen)//speichere geschalteten Zustand
                $('#' + buttonID).toggleClass("active")
                $('#' + buttonID + ' > a').text("Gruppenschaltung")
                zustandWiederherstellen(JSON.parse(gruppenStatus))// lade Gruppenzustand
            }

            else {
                Einzel = true
                gruppenStatus = JSON.stringify(ApFunkstellen)//speichere geschalteten Zustand
                $('#' + buttonID).toggleClass("active")
                $('#' + buttonID + ' > a').text("Einzelschaltung")
                zustandWiederherstellen(JSON.parse(einzelStatus))//lade Einzelzustand

            }

        }

        function zustandWiederherstellen(AufschalteZustand) {
            //Backup, da die Funktionen schalten und trennen mit Rueckmeldung schon in ApFunkstellen schreiben
            backupApFunkstellen = ApFunkstellen
            $.each(backupApFunkstellen, function (key, value) {
                if (value.aufgeschaltet == true && AufschalteZustand[key].aufgeschaltet == true) {
                    //nix
                }
                if (value.aufgeschaltet == true && AufschalteZustand[key].aufgeschaltet == false) {
                    //trennen
                    trennen(AufschalteZustand[key].id, SPAN)
                }
                if (value.aufgeschaltet == false && AufschalteZustand[key].aufgeschaltet == true) {
                    //schalten
                    schalten(AufschalteZustand[key].id, SPAN)
                }
                if (value.aufgeschaltet == false && AufschalteZustand[key].aufgeschaltet == false) {
                    //nix
                }
            })


            //console.log("Funkstellen ID nicht vorhanden: "+Id)
        }

        function setzeKanal(element) {
            var neuerKanal = ""
            
            //Kanal wurde über Spinbox geändert
            if (element != undefined){
                neuerKanal = element.innerText
            }
            //Kanal wurde über direkt auswahl geändet
            else{
                neuerKanal = $(".spinbox-input").val()
            }
            console.log('clientMessage', {'FstID': geklickteMKA, 'Kanal': neuerKanal, 'aktion': 'setzeKanal'})
            socket.emit('clientMessage', {'FstID': geklickteMKA, 'Kanal': neuerKanal, 'aktion': 'setzeKanal'})
            //  $.notify('Setze Kanal: '+ApFunkstellen[geklickteMKA].sname +' auf '+ element.innerText +' ...')
        }



   
  
     
    
  

   
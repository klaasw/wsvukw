extends layout
block content
    div.container-fluid
        div.content
            div.col-md-2
            div.col-md-6
                p test
                #myRepeater.repeater
                  .repeater-header
                    .repeater-header-left
                      span.repeater-title Awesome Repeater
                      .repeater-search
                        .search.input-group
                          input.form-control(type='search', placeholder='Search')
                          span.input-group-btn
                            button.btn.btn-default(type='button')
                              span.glyphicon.glyphicon-search
                              span.sr-only Search
                    .repeater-header-right
                      .btn-group.selectlist.repeater-filters(data-resize='auto')
                        button.btn.btn-default.dropdown-toggle(type='button', data-toggle='dropdown')
                          span.selected-label  
                          span.caret
                          span.sr-only Toggle Filters
                        ul.dropdown-menu(role='menu')
                          li(data-value='all', data-selected='true')
                            a(href='#') all
                          li(data-value='some')
                            a(href='#') some
                          li(data-value='others')
                            a(href='#') others
                        input.hidden.hidden-field(name='filterSelection', readonly='readonly', aria-hidden='true', type='text')
                      .btn-group.repeater-views(data-toggle='buttons')
                        label.btn.btn-default.active
                          input(name='repeaterViews', type='radio', value='list')
                          span.glyphicon.glyphicon-list
                        label.btn.btn-default
                          input(name='repeaterViews', type='radio', value='thumbnail')
                          span.glyphicon.glyphicon-th
                  .repeater-viewport
                    .repeater-canvas
                    .loader.repeater-loader
                  .repeater-footer
                    .repeater-footer-left
                      .repeater-itemization
                        span
                          span.repeater-start
                          |  - 
                          span.repeater-end
                          |  of 
                          span.repeater-count
                          |  items
                        .btn-group.selectlist(data-resize='auto')
                          button.btn.btn-default.dropdown-toggle(type='button', data-toggle='dropdown')
                            span.selected-label  
                            span.caret
                            span.sr-only Toggle Dropdown
                          ul.dropdown-menu(role='menu')
                            li(data-value='5')
                              a(href='#') 5
                            li(data-value='10', data-selected='true')
                              a(href='#') 10
                            li(data-value='20')
                              a(href='#') 20
                            li(data-value='50', data-foo='bar', data-fizz='buzz')
                              a(href='#') 50
                            li(data-value='100')
                              a(href='#') 100
                          input.hidden.hidden-field(name='itemsPerPage', readonly='readonly', aria-hidden='true', type='text')
                        span Per Page
                    .repeater-footer-right
                      .repeater-pagination
                        button.btn.btn-default.btn-sm.repeater-prev(type='button')
                          span.glyphicon.glyphicon-chevron-left
                          span.sr-only Previous Page
                        label#myPageLabel.page-label Page
                        .repeater-primaryPaging.active
                          .input-group.input-append.dropdown.combobox
                            input.form-control(type='text', aria-labelledby='myPageLabel')
                            .input-group-btn
                              button.btn.btn-default.dropdown-toggle(type='button', data-toggle='dropdown')
                                span.caret
                                span.sr-only Toggle Dropdown
                              ul.dropdown-menu.dropdown-menu-right
                        input.form-control.repeater-secondaryPaging(type='text', aria-labelledby='myPageLabel')
                        span
                          | of 
                          span.repeater-pages
                        button.btn.btn-default.btn-sm.repeater-next(type='button')
                          span.glyphicon.glyphicon-chevron-right
                          span.sr-only Next Page
                
block append codeTeil2
    script.
        function staticDataSource(options, callback) {
            var columns = [{
                'label': 'Name',
                'property': 'name',
                'sortable': true
            }, {
                'label': 'Description',
                'property': 'description',
                'sortable': true
            }, {
                'label': 'Status',
                'property': 'status',
                'sortable': true
            }, {
                'label': 'Category',
                'property': 'category',
                'sortable': true
            }];
            
            // Generate the rows in your dataset.
            // NOTE: The property names of your items should
            // match the column properties defined above.
            function generateDummyData() {
                var items = [];
                var amountOfItems = 100; //Change this number
                var statuses = ['Archived', 'Active', 'Draft'];
                var categories = ['New', 'Old', 'Upcoming'];
        
                function getRandomStatus() {
                    var index = Math.floor(Math.random() * statuses.length);
                    return statuses[index];
                }
        
                function getRandomCategory() {
                    var index = Math.floor(Math.random() * categories.length);
                    return categories[index];
                }
        
                for (var i = 1; i <= amountOfItems; i++) {
                    var item = {
                        id: i,
                        name: 'Item ' + i,
                        description: 'Desc ' + i,
                        status: getRandomStatus(),
                        category: getRandomCategory()
                    }
                    items.push(item);
                };
        
                // Uncomment these to see in your console the
                // JSON payload produced by this function.
                //console.log(JSON.stringify(items));
                //console.table(items);
        
                return items;
            }
        
            var items = generateDummyData();
        
            // These are the visible UI options of the repeater,
            // such as how many items to display per page. They
            // are provided by the Fuel library.
            //console.log(options);
        
            // Set the values that will be used in your dataSource.
            var pageIndex = options.pageIndex;
            var pageSize = options.pageSize;
            var totalItems = items.length;
            var totalPages = Math.ceil(totalItems / pageSize);
            var startIndex = (pageIndex * pageSize) + 1;
            var endIndex = (startIndex + pageSize) - 1;
            if (endIndex > totalItems) {
                endIndex = totalItems;
            }
            var rows = items.slice(startIndex - 1, endIndex);
        
            // Define the datasource.
            var dataSource = {
                'page': pageIndex,
                'pages': totalPages,
                'count': totalItems,
                'start': startIndex,
                'end': endIndex,
                'columns': columns,
                'items': rows
            };
        
            //console.log(dataSource);
        
            // Pass the datasource back to the repeater.
            callback(dataSource);
        }
        
        
        
        // Initialize the repeater.
        $('#myRepeater').repeater({
            // Setup your custom datasource to handle data retrieval;
            // responsible for any paging, sorting, filtering, searching logic.
            dataSource: staticDataSource,
            // Other options can be placed here as well, such as text to
            // display if no data is returned.
            list_noItemsHTML: "No items found."
            // See: getfuelux.com/javascript.html#repeater-usage-options
            // for more options to put here.
        });
        
        $('#myRepeater').repeater({dataSource: dataSource});
